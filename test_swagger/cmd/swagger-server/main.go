// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"

	loads "github.com/go-openapi/loads"
	"flag"
	"test_swagger/restapi"
	"test_swagger/restapi/operations"
	"github.com/go-openapi/runtime/middleware"
	"fmt"
	"github.com/go-openapi/swag"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	var portFlag = flag.Int("port", 3000, "Port to run this service on")
	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	// create new service API
	api := operations.NewSwaggerAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	// parse flags
	flag.Parse()
	// set the port this service will be run on
	server.Port = *portFlag

	// TODO: Set Handle
	api.GetGreetingHandler = operations.GetGreetingHandlerFunc(
		func(params operations.GetGreetingParams) middleware.Responder {
			name := swag.StringValue(params.Name)
			if name == "" {
				name = "World"
			}

			greeting := fmt.Sprintf("Hello, %s!", name)
			return operations.NewGetGreetingOK().WithPayload(greeting)
		})


	// serve API
	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

	//swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	//if err != nil {
	//	log.Fatalln(err)
	//}
	//
	//api := operations.NewSwaggerAPI(swaggerSpec)
	//server := restapi.NewServer(api)
	//defer server.Shutdown()
	//
	//parser := flags.NewParser(server, flags.Default)
	//parser.ShortDescription = "Greeting Server"
	//parser.LongDescription = swaggerSpec.Spec().Info.Description
	//
	//server.ConfigureFlags()
	//for _, optsGroup := range api.CommandLineOptionsGroups {
	//	_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
	//	if err != nil {
	//		log.Fatalln(err)
	//	}
	//}
	//
	//if _, err := parser.Parse(); err != nil {
	//	code := 1
	//	if fe, ok := err.(*flags.Error); ok {
	//		if fe.Type == flags.ErrHelp {
	//			code = 0
	//		}
	//	}
	//	os.Exit(code)
	//}
	//
	//server.ConfigureAPI()
	//
	//if err := server.Serve(); err != nil {
	//	log.Fatalln(err)
	//}

}
