/*
 * Basic swagger example application
 *
 * A slot crud apis
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"net/http"
	db "github.com/fwhezfwhez/xorm-tool"
	"encoding/json"
	"io/ioutil"
	"fmt"
	"strings"
	"errors"
	"swaggerSlot/go-server-server/models"
)

func init() {
	db.DataSource("postgres://postgres:123@localhost:5432/test?sslmode=disable")
	db.DefaultConfig()
}
func AddOne(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	type SlotAdd struct{
		SlotName string `json:"slot_name"`
	}
	slot:= SlotAdd{}
	err:= Bind(&slot,r)
	fmt.Println("获取到slotName:",slot.SlotName)
	if err!=nil{
		w.WriteHeader(200)
		fmt.Fprint(w,err.Error())
		return
	}
	_,er:=db.Insert("insert into slot(name) values(?)",slot.SlotName)
	if er!=nil{
		w.WriteHeader(200)
		fmt.Fprint(w,err.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w,"成功新增")
}

func DeleteSlot(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	type SlotDelete struct{
		SlotId string `json:"slot_id"`
	}
	slot:= SlotDelete{}
	err:= Bind(&slot,r)
	fmt.Println("获取到slotId:",slot.SlotId)
	if err!=nil{
		w.WriteHeader(200)
		fmt.Fprint(w,err.Error())
		return
	}

	_,er:=db.Delete("delete from slot where id=?",slot.SlotId)
	if err!=nil{
		w.WriteHeader(200)
		fmt.Fprint(w,er.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w,"成功删除")
}

func GetAll(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	slots :=make([]models.Slot,0)
	err:=db.Select(&slots,"select * from slot")
	if err !=nil{
		w.WriteHeader(http.StatusOK)
		fmt.Fprint(w,err.Error())
		return
	}

	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w,slots)
}

func ModifySlot(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	type SlotModify struct{
		SlotId string `json:"slot_id"`
	}
	slot:=SlotModify{}
	err:=Bind(&slot,r)
	if err!=nil{
		w.WriteHeader(200)
		fmt.Fprint(w,err.Error())
		return
	}
	_,err=db.Update("update slot set name='modified' where id=?",slot.SlotId)
	if err!=nil{
		w.WriteHeader(200)
		fmt.Fprint(w,err.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w,"成功修改")
}

func Bind(dest interface{},r *http.Request) error{
	rMethod := strings.ToUpper(r.Method)
	if rMethod=="POST"||rMethod=="PATCH"||rMethod=="PUT"||rMethod=="DELETE" {
		body,err:=ioutil.ReadAll(r.Body)
		defer r.Body.Close()
		if err!=nil {
			return err
		}
		if r.Header.Get("Content-Type") =="application/json"{
			err:=json.Unmarshal(body,dest)
			if err!=nil{
				return err
			}
		}
		return nil
	}else if rMethod=="GET"{
		return errors.New("not implemented")
	}else{
		return errors.New("method should be one of [GET,POST,PATCH,DELETE,PUT]")
	}
}